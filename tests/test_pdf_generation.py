"""
Test PDF Generation Functionality

Tests for WeasyPrint-based PDF report generation
"""
import os
import tempfile
from datetime import datetime, timedelta
from pathlib import Path

import pytest

from app import create_app, db
from app.models import (
    AuditLog,
    BackupExecution,
    BackupJob,
    ComplianceStatus,
    Report,
    User,
    VerificationTest,
)
from app.services.pdf_generator import ChartGenerator, PDFGenerator
from app.services.report_generator import ReportGenerator


@pytest.fixture
def app():
    """Create application for testing"""
    app = create_app("testing")
    app.config["TESTING"] = True
    app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///:memory:"

    with app.app_context():
        db.create_all()
        yield app
        db.session.remove()
        db.drop_all()


@pytest.fixture
def client(app):
    """Create test client"""
    return app.test_client()


@pytest.fixture
def test_user(app):
    """Create test user"""
    with app.app_context():
        user = User(username="testuser", email="test@example.com", role="admin")
        user.set_password("password123")
        db.session.add(user)
        db.session.commit()
        return user


@pytest.fixture
def test_data(app, test_user):
    """Create test data"""
    with app.app_context():
        # Create backup job
        job = BackupJob(
            job_name="Test Backup Job",
            source_path="/test/source",
            destination_path="/test/destination",
            schedule_type="daily",
            is_active=True,
            created_by=test_user.id,
        )
        db.session.add(job)
        db.session.commit()

        # Create backup executions
        for i in range(10):
            execution = BackupExecution(
                job_id=job.id,
                execution_date=datetime.utcnow() - timedelta(days=i),
                execution_result="success" if i < 8 else "failed",
                backup_size_bytes=1024 * 1024 * 100,  # 100MB
                duration_seconds=120,
            )
            db.session.add(execution)

        # Create compliance status
        compliance = ComplianceStatus(
            job_id=job.id,
            check_date=datetime.utcnow(),
            three_copies=True,
            two_media_types=True,
            one_offsite=True,
            one_offline=True,
            zero_errors=True,
            overall_status="compliant",
        )
        db.session.add(compliance)

        # Create verification test
        test = VerificationTest(
            job_id=job.id,
            test_date=datetime.utcnow(),
            test_type="integrity",
            test_result="success",
        )
        db.session.add(test)

        # Create audit logs
        for i in range(20):
            log = AuditLog(
                user_id=test_user.id,
                action_type="EXECUTE" if i % 2 == 0 else "VERIFY",
                action_result="success",
                resource_type="BackupJob",
                resource_id=job.id,
                description=f"Test action {i}",
                ip_address="127.0.0.1",
            )
            db.session.add(log)

        db.session.commit()
        return {"job": job, "user": test_user}


class TestPDFGenerator:
    """Test PDFGenerator class"""

    def test_pdf_generator_initialization(self, app):
        """Test PDF generator initialization"""
        with app.app_context():
            pdf_gen = PDFGenerator()
            assert pdf_gen.font_config is not None
            assert pdf_gen.base_css is not None

    def test_generate_simple_pdf(self, app):
        """Test simple PDF generation from HTML"""
        with app.app_context():
            pdf_gen = PDFGenerator()

            html = """
            <!DOCTYPE html>
            <html>
            <head><title>Test PDF</title></head>
            <body>
                <h1>Test PDF Document</h1>
                <p>This is a test PDF generated by WeasyPrint.</p>
            </body>
            </html>
            """

            pdf_bytes = pdf_gen.generate_pdf_from_html(html)

            assert pdf_bytes is not None
            assert isinstance(pdf_bytes, bytes)
            assert pdf_bytes.startswith(b"%PDF")

    def test_generate_pdf_with_japanese(self, app):
        """Test PDF generation with Japanese text"""
        with app.app_context():
            pdf_gen = PDFGenerator()

            html = """
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>日本語テスト</title>
            </head>
            <body>
                <h1>日本語PDFテスト</h1>
                <p>これは日本語のテストです。</p>
            </body>
            </html>
            """

            pdf_bytes = pdf_gen.generate_pdf_from_html(html)

            assert pdf_bytes is not None
            assert isinstance(pdf_bytes, bytes)

    def test_generate_iso27001_report(self, app, test_data):
        """Test ISO 27001 report generation"""
        with app.app_context():
            pdf_gen = PDFGenerator()

            data = {
                "total_jobs": 10,
                "success_count": 8,
                "failed_count": 2,
                "compliance_rate": 80.0,
                "verification_rate": 90.0,
                "executions": [],
                "compliance_statuses": [],
                "verification_tests": [],
                "total_backup_size": 1024 * 1024 * 1024,
                "avg_backup_size": 100 * 1024 * 1024,
                "avg_duration": 120,
            }

            pdf_bytes = pdf_gen.generate_iso27001_report(
                data=data,
                start_date=datetime(2025, 10, 1),
                end_date=datetime(2025, 10, 31),
            )

            assert pdf_bytes is not None
            assert isinstance(pdf_bytes, bytes)
            assert len(pdf_bytes) > 1000  # Should be a substantial PDF

    def test_generate_iso19650_report(self, app, test_data):
        """Test ISO 19650 report generation"""
        with app.app_context():
            pdf_gen = PDFGenerator()

            data = {
                "total_jobs": 10,
                "total_containers": 50,
                "compliance_rate": 95.0,
                "retrieval_rate": 100.0,
                "verification_rate": 98.0,
                "success_rate": 96.0,
                "avg_duration": 180,
                "total_backup_size": 2 * 1024 * 1024 * 1024,
                "growth_rate": 5.0,
                "dedup_ratio": 30.0,
                "executions": [],
                "verification_tests": [],
            }

            pdf_bytes = pdf_gen.generate_iso19650_report(
                data=data,
                start_date=datetime(2025, 10, 1),
                end_date=datetime(2025, 10, 31),
            )

            assert pdf_bytes is not None
            assert isinstance(pdf_bytes, bytes)

    def test_embed_chart_as_base64(self, app):
        """Test chart embedding as base64"""
        with app.app_context():
            pdf_gen = PDFGenerator()

            # Create a test image
            with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
                tmp.write(b"\x89PNG\r\n\x1a\n")  # PNG header
                tmp_path = tmp.name

            try:
                base64_data = pdf_gen.embed_chart_as_base64(tmp_path)
                assert base64_data.startswith("data:image/png;base64,")
            finally:
                os.unlink(tmp_path)


class TestChartGenerator:
    """Test ChartGenerator class"""

    def test_generate_compliance_trend_chart(self, app):
        """Test compliance trend chart generation"""
        with app.app_context():
            with tempfile.TemporaryDirectory() as tmpdir:
                output_path = os.path.join(tmpdir, "compliance_trend.png")

                data = {
                    "dates": ["2025-10-01", "2025-10-08", "2025-10-15", "2025-10-22"],
                    "compliance_rates": [92.0, 94.5, 96.0, 97.5],
                }

                result_path = ChartGenerator.generate_compliance_trend_chart(data=data, output_path=output_path)

                # Check if chart was created (may fail if matplotlib not available)
                if result_path:
                    assert os.path.exists(result_path)
                    assert os.path.getsize(result_path) > 0

    def test_generate_backup_status_pie_chart(self, app):
        """Test backup status pie chart generation"""
        with app.app_context():
            with tempfile.TemporaryDirectory() as tmpdir:
                output_path = os.path.join(tmpdir, "backup_status.png")

                data = {
                    "success_count": 480,
                    "failed_count": 12,
                    "warning_count": 8,
                }

                result_path = ChartGenerator.generate_backup_status_pie_chart(data=data, output_path=output_path)

                # Check if chart was created
                if result_path:
                    assert os.path.exists(result_path)


class TestReportGeneratorPDF:
    """Test ReportGenerator PDF methods"""

    def test_generate_daily_pdf_report(self, app, test_user, test_data):
        """Test daily PDF report generation"""
        with app.app_context():
            generator = ReportGenerator()

            report = generator.generate_daily_report(
                generated_by=test_user.id,
                date=datetime.utcnow().date(),
                format="pdf",
            )

            assert report is not None
            assert report.report_type == "daily"
            assert report.file_format == "pdf"
            assert os.path.exists(report.file_path)
            assert os.path.getsize(report.file_path) > 0

    def test_generate_compliance_pdf_report(self, app, test_user, test_data):
        """Test compliance PDF report generation"""
        with app.app_context():
            generator = ReportGenerator()

            report = generator.generate_compliance_report(generated_by=test_user.id, format="pdf")

            assert report is not None
            assert report.report_type == "compliance"
            assert report.file_format == "pdf"
            assert os.path.exists(report.file_path)

    def test_generate_audit_pdf_report(self, app, test_user, test_data):
        """Test audit PDF report generation"""
        with app.app_context():
            generator = ReportGenerator()

            report = generator.generate_audit_report(
                generated_by=test_user.id,
                start_date=datetime.utcnow() - timedelta(days=7),
                end_date=datetime.utcnow(),
                format="pdf",
            )

            assert report is not None
            assert report.report_type == "audit"
            assert report.file_format == "pdf"
            assert os.path.exists(report.file_path)

    def test_generate_monthly_pdf_report(self, app, test_user, test_data):
        """Test monthly PDF report generation"""
        with app.app_context():
            generator = ReportGenerator()

            report = generator.generate_monthly_report(
                generated_by=test_user.id,
                year=2025,
                month=10,
                format="pdf",
            )

            assert report is not None
            assert report.report_type == "monthly"
            assert report.file_format == "pdf"
            assert os.path.exists(report.file_path)


class TestPDFTemplates:
    """Test PDF template rendering"""

    def test_iso27001_template_rendering(self, app, client):
        """Test ISO 27001 template can be rendered"""
        with app.app_context():
            from flask import render_template

            context = {
                "report_title": "Test ISO 27001 Report",
                "start_date": datetime(2025, 10, 1),
                "end_date": datetime(2025, 10, 31),
                "generated_date": datetime.utcnow(),
                "data": {
                    "total_jobs": 10,
                    "compliance_rate": 95.0,
                    "success_rate": 98.0,
                    "verification_rate": 97.0,
                },
                "clauses": [],
            }

            html = render_template("reports/iso27001_template.html", **context)

            assert html is not None
            assert "ISO 27001" in html
            assert "情報セキュリティマネジメント" in html

    def test_compliance_template_rendering(self, app, client):
        """Test compliance template can be rendered"""
        with app.app_context():
            from flask import render_template

            context = {
                "report_title": "3-2-1-1-0 Compliance Report",
                "start_date": datetime(2025, 10, 1),
                "end_date": datetime(2025, 10, 31),
                "generated_date": datetime.utcnow(),
                "data": {
                    "total_jobs": 10,
                    "compliance_rate": 90.0,
                    "compliant_jobs": 9,
                    "non_compliant_jobs": 1,
                    "warning_jobs": 0,
                    "three_copies_rate": 100.0,
                    "two_media_rate": 90.0,
                    "one_offsite_rate": 95.0,
                    "one_offline_rate": 85.0,
                    "zero_errors_rate": 100.0,
                },
            }

            html = render_template("reports/compliance_report_template.html", **context)

            assert html is not None
            assert "3-2-1-1-0" in html
            assert "コンプライアンス" in html


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
