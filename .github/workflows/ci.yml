name: CI Pipeline

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          if [ -d "app" ]; then
            flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          else
            echo "app/ directory not found, skipping flake8"
          fi

      - name: Check code formatting with black
        continue-on-error: true
        run: |
          if [ -d "app" ]; then
            black --check app/ --line-length=127 || echo "⚠️  Black formatting issues found (not blocking)"
          else
            echo "app/ directory not found, skipping black"
          fi

      - name: Check import sorting with isort
        continue-on-error: true
        run: |
          if [ -d "app" ]; then
            isort --check-only app/ --profile black || echo "⚠️  Import sorting issues found (not blocking)"
          else
            echo "app/ directory not found, skipping isort"
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov pytest-mock

      - name: Run tests with coverage
        run: |
          if [ -d "tests" ] && [ "$(ls -A tests/unit/ tests/integration/ 2>/dev/null)" ]; then
            pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing
          else
            echo "No tests found, skipping test execution"
            echo '<?xml version="1.0" ?><coverage version="7.0"></coverage>' > coverage.xml
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit security scan
        run: |
          if [ -d "app" ]; then
            bandit -r app/ -f json -o bandit-report.json || true
          else
            echo "app/ directory not found, skipping bandit scan"
            echo '{"results": [], "metrics": {}}' > bandit-report.json
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Build application
        run: |
          echo "Build completed successfully"

      - name: Create deployment artifact
        run: |
          FILES=""
          [ -d "app" ] && FILES="$FILES app/"
          [ -d "migrations" ] && FILES="$FILES migrations/"
          [ -d "scripts" ] && FILES="$FILES scripts/"
          [ -d "deployment" ] && FILES="$FILES deployment/"
          [ -f "requirements.txt" ] && FILES="$FILES requirements.txt"
          [ -f "run.py" ] && FILES="$FILES run.py"

          if [ -n "$FILES" ]; then
            tar -czf backup-mgmt-system-${{ github.sha }}.tar.gz $FILES
          else
            echo "No deployment files found, creating empty archive"
            tar -czf backup-mgmt-system-${{ github.sha }}.tar.gz --files-from /dev/null
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: backup-mgmt-system-${{ github.sha }}.tar.gz
