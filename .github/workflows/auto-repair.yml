name: Auto-Repair System

on:
  # Issueが作成されたときに実行
  issues:
    types: [opened, labeled]

  # 定期的なヘルスチェック（10分ごと）
  schedule:
    - cron: '*/10 * * * *'  # 10分ごとに実行

  # 手動実行も可能
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to repair (optional)'
        required: false
        type: number

jobs:
  # 定期ヘルスチェックジョブ
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run health check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: development
        run: |
          python scripts/health_check.py || true

      - name: Upload health check logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-check-logs
          path: logs/health_checks/
          retention-days: 7

  # 自動修復ジョブ
  auto-repair:
    name: Auto-Repair Agent
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && github.event.action == 'opened' && contains(github.event.issue.labels.*.name, 'auto-repair')) ||
      (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'auto-repair') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.issue_number != '')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Get issue number
        id: issue
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "number=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
          else
            echo "number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Check for manual-repair label
        id: check_label
        run: |
          LABELS=$(gh issue view ${{ steps.issue.outputs.number }} --json labels --jq '.labels[].name')
          if echo "$LABELS" | grep -q "manual-repair"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Issue has manual-repair label. Skipping auto-repair."
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run auto-repair agent (Single attempt)
        if: steps.check_label.outputs.skip == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FLASK_ENV: development
        run: |
          # 単一試行のみ実行（ループはGitHub Actionsのスケジュールで管理）
          python scripts/auto_repair.py --issue ${{ steps.issue.outputs.number }} --max-retries 1 --retry-interval 0

      - name: Upload repair logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auto-repair-logs-issue-${{ steps.issue.outputs.number }}
          path: logs/
          retention-days: 7

      - name: Comment on success
        if: success()
        run: |
          gh issue comment ${{ steps.issue.outputs.number }} --body "✅ 自動修復が正常に完了しました。システムは正常に動作しています。"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on failure
        if: failure()
        run: |
          gh issue comment ${{ steps.issue.outputs.number }} --body "⚠️ 自動修復が失敗しました。次回の自動実行（10分後）で再試行します。連続して失敗する場合は \`manual-repair\` ラベルを追加して手動対応してください。"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 修復試行回数カウントとステータス管理
  track-repair-attempts:
    name: Track Repair Attempts
    runs-on: ubuntu-latest
    needs: auto-repair
    if: always() && (github.event_name == 'issues' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get issue number
        id: issue
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "number=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
          else
            echo "number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Count repair attempts
        id: count
        run: |
          # Issueのコメント数から修復試行回数をカウント
          ATTEMPT_COUNT=$(gh issue view ${{ steps.issue.outputs.number }} --json comments --jq '.comments | map(select(.body | contains("自動修復試行"))) | length')
          echo "attempts=$ATTEMPT_COUNT" >> $GITHUB_OUTPUT
          echo "Current repair attempts: $ATTEMPT_COUNT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add manual-repair label if max attempts reached
        if: steps.count.outputs.attempts >= 10
        run: |
          gh issue edit ${{ steps.issue.outputs.number }} --add-label "manual-repair"
          gh issue comment ${{ steps.issue.outputs.number }} --body "🔴 **最大試行回数（10回）に到達しました**

自動修復が10回連続で失敗しました。手動での対応が必要です。

**推奨アクション**:
1. エラーログを確認
2. 根本原因を調査
3. 手動で修復を実施
4. 修復完了後、このIssueをクローズ

自動修復を再開する場合は、\`manual-repair\` ラベルを削除してください。"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
